{"ast":null,"code":"import _slicedToArray from \"C:/Users/info/Desktop/projects/viltis/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nexport default function useWindowSize() {\n  _s();\n\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  var _useState = useState({\n    width: undefined,\n    height: undefined\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      windowSize = _useState2[0],\n      setWindowSize = _useState2[1];\n\n  useEffect(function () {\n    // Handler to call on window resize\n    if (typeof window !== undefined) {\n      var handleResize = function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight\n        });\n      }; // Add event listener\n\n\n      window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n      handleResize(); // Remove event listener on cleanup\n\n      return function () {\n        return window.removeEventListener(\"resize\", handleResize);\n      };\n    }\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n\n_s(useWindowSize, \"SHp7Qp4LmBhnCBa2MV0ReHxhJEA=\");","map":{"version":3,"sources":["C:/Users/info/Desktop/projects/viltis/src/hooks/useWindowSize.js"],"names":["React","useEffect","useState","useWindowSize","width","undefined","height","windowSize","setWindowSize","window","handleResize","innerWidth","innerHeight","addEventListener","removeEventListener"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AACtC;AACA;AACA,kBAAoCD,QAAQ,CAAC;AAC3CE,IAAAA,KAAK,EAAEC,SADoC;AAE3CC,IAAAA,MAAM,EAAED;AAFmC,GAAD,CAA5C;AAAA;AAAA,MAAOE,UAAP;AAAA,MAAmBC,aAAnB;;AAIAP,EAAAA,SAAS,CAAC,YAAM;AACd;AACA,QAAI,OAAOQ,MAAP,KAAkBJ,SAAtB,EAAiC;AAAA,UACtBK,YADsB,GAC/B,SAASA,YAAT,GAAwB;AACtB;AACAF,QAAAA,aAAa,CAAC;AACZJ,UAAAA,KAAK,EAAEK,MAAM,CAACE,UADF;AAEZL,UAAAA,MAAM,EAAEG,MAAM,CAACG;AAFH,SAAD,CAAb;AAID,OAP8B,EAQ/B;;;AACAH,MAAAA,MAAM,CAACI,gBAAP,CAAwB,QAAxB,EAAkCH,YAAlC,EAT+B,CAU/B;;AACAA,MAAAA,YAAY,GAXmB,CAY/B;;AACA,aAAO;AAAA,eAAMD,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCJ,YAArC,CAAN;AAAA,OAAP;AACD;AACF,GAjBQ,EAiBN,EAjBM,CAAT,CAPsC,CAwB9B;;AACR,SAAOH,UAAP;AACD;;GA1BuBJ,a","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nexport default function useWindowSize() {\r\n  // Initialize state with undefined width/height so server and client renders match\r\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: undefined,\r\n    height: undefined\r\n  });\r\n  useEffect(() => {\r\n    // Handler to call on window resize\r\n    if (typeof window !== undefined) {\r\n      function handleResize() {\r\n        // Set window width/height to state\r\n        setWindowSize({\r\n          width: window.innerWidth,\r\n          height: window.innerHeight\r\n        });\r\n      }\r\n      // Add event listener\r\n      window.addEventListener(\"resize\", handleResize);\r\n      // Call handler right away so state gets updated with initial window size\r\n      handleResize();\r\n      // Remove event listener on cleanup\r\n      return () => window.removeEventListener(\"resize\", handleResize);\r\n    }\r\n  }, []); // Empty array ensures that effect is only run on mount\r\n  return windowSize;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}